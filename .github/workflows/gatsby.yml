#将Gatsby网站构建和部署到GitHub页面的示例工作流
#
#要开始使用盖茨比，请参阅：https://www.gatsbyjs.com/docs/quick-start/
#
姓名:将Gatsby网站部署到页面

在……之上:
  #在以默认分支为目标的推送上运行
推:
分支机构:["主要"]

  #允许您从“操作”选项卡手动运行此工作流
workflow_dispatch:

#设置GITHUB_TOKEN的权限以允许部署到GitHub页面
权限:
内容:读
页面:写
id-token:写

#只允许一个并发部署，跳过正在运行和最新排队之间排队的运行。
#但是，不要取消正在进行的运行，因为我们希望允许这些生产部署完成。
并发性:
组:"页面"
正在取消:假的

#默认为bash
默认值:
跑:
壳:猛击

工作:
  #生成作业
建立:
run-on:ubuntu-最新
步骤:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
        with:
          # Automatically inject pathPrefix in your Gatsby configuration file.
          #
          # You may remove this line if you want to manage the configuration yourself.
          static_site_generator: gatsby
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            public
            .cache
          key: ${{ runner.os }}-gatsby-build-${{ hashFiles('public') }}
          restore-keys: |
            ${{ runner.os }}-gatsby-build-
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build with Gatsby
        env:
          PREFIX_PATHS: 'true'
        run: ${{ steps.detect-package-manager.outputs.manager }} run build
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
